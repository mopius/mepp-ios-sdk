// Generated by Apple Swift version 4.0 (swiftlang-900.0.65 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreBluetooth;
@import CoreLocation;
@import MapKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("MeppSDK")

SWIFT_CLASS("_TtC7MeppSDK14AnalyticsEvent")
@interface AnalyticsEvent : NSObject
@property (nonatomic, copy) NSString * _Nonnull category;
@property (nonatomic, copy) NSString * _Nonnull action;
@property (nonatomic, copy) NSString * _Nullable label;
@property (nonatomic, copy) NSString * _Nullable value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSNumber;

SWIFT_CLASS("_TtC7MeppSDK9AppConfig")
@interface AppConfig : NSObject
/// The distance when a significant distance change should be initiated.
@property (nonatomic, strong) NSNumber * _Nullable slcDistance;
/// The minimum allowed SDK version.
@property (nonatomic, copy) NSString * _Nullable minSDK;
/// The maximum session time.
@property (nonatomic, strong) NSNumber * _Nullable maxSessionTime;
/// The default iBeacon UUID.
@property (nonatomic, copy) NSString * _Nullable defaultBeaconUUID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class CLBeacon;
@class NSCoder;

SWIFT_CLASS("_TtC7MeppSDK6Beacon")
@interface Beacon : NSObject <NSCoding>
/// The UUID of the beacon.
@property (nonatomic, copy) NSString * _Nullable uuid;
@property (nonatomic, copy) NSString * _Nullable major;
@property (nonatomic, copy) NSString * _Nullable minor;
@property (nonatomic, strong) NSNumber * _Nullable battery;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithClbeacon:(CLBeacon * _Nonnull)clbeacon OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithUUID:(NSString * _Nonnull)uuid major:(NSString * _Nonnull)major minor:(NSString * _Nonnull)minor battery:(NSNumber * _Nonnull)battery OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

typedef SWIFT_ENUM(NSInteger, BluetoothStatus) {
  BluetoothStatusOn = 0,
  BluetoothStatusOff = 1,
  BluetoothStatusError = 2,
  BluetoothStatusUnknown = 3,
};





@class MetaInfo;
@class TextRecord;
@class LinkedContent;

SWIFT_CLASS("_TtC7MeppSDK7Content")
@interface Content : NSObject
/// The internal content id. Use this to fetch content a by id.
@property (nonatomic, strong) NSNumber * _Nullable contentId;
/// The type of the content.
@property (nonatomic, copy) NSString * _Nullable contentType;
/// The delay after the content should be shown in seconds.
@property (nonatomic, strong) NSNumber * _Nullable delayTime;
/// The cooldown time in seconds after which the SDK notifies for a content again.
@property (nonatomic, strong) NSNumber * _Nullable coolDownTime;
/// This indicates the date from which a content is active.
@property (nonatomic, copy) NSDate * _Nullable activeDateStart;
@property (nonatomic, copy) NSDate * _Nullable activeDateStop;
@property (nonatomic, copy) NSString * _Nullable activeTimeStart;
@property (nonatomic, copy) NSString * _Nullable activeTimeStop;
/// The meta info of the content.
@property (nonatomic, strong) MetaInfo * _Nullable metaInfo;
/// The text record of the content.
@property (nonatomic, strong) TextRecord * _Nullable textRecord;
/// The extra infos as a dictionary (e.g. the legal text).
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull extraInfo;
/// The linked contents.
@property (nonatomic, copy) NSArray<LinkedContent *> * _Nullable linkedContent;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MeppSDK11GeoLocation")
@interface GeoLocation : NSObject <MKAnnotation>
/// The coordinate. The location of the geofence.
@property (nonatomic) CLLocationCoordinate2D coordinate;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MeppSDK12LanguageCode")
@interface LanguageCode : NSObject
/// The language code.
@property (nonatomic, copy) NSString * _Nullable code;
/// The human readable name of the language code.
@property (nonatomic, copy) NSString * _Nullable name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MeppSDK13LinkedContent")
@interface LinkedContent : NSObject
/// The contentId of the linked content.
@property (nonatomic, strong) NSNumber * _Nullable contentId;
/// The name of the linked content.
@property (nonatomic, copy) NSString * _Nullable name;
/// The content type of the linked content.
@property (nonatomic, copy) NSString * _Nullable contentType;
/// The meta info of the linked content.
@property (nonatomic, strong) MetaInfo * _Nullable metaInfo;
/// The extra infos of the linked content as a dictionary (e.g. the legal text).
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull extraInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, LocationStatus) {
  LocationStatusAlwaysAllowed = 0,
  LocationStatusWhenInUseAllowed = 1,
  LocationStatusNotAllowed = 2,
  LocationStatusUnknown = 3,
};

@class StatusResponse;
@class Place;

SWIFT_CLASS("_TtC7MeppSDK13MeppAPIClient")
@interface MeppAPIClient : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAppToken:(NSString * _Nonnull)appToken apiHost:(NSString * _Nonnull)apiHost OBJC_DESIGNATED_INITIALIZER;
/// Get the API status.
- (void)status:(void (^ _Nonnull)(BOOL, StatusResponse * _Nullable, NSInteger))completion;
/// Get all app tokens for the user.
- (void)appConfig:(void (^ _Nonnull)(BOOL, AppConfig * _Nullable, NSInteger))completion;
/// Get content by id.
- (void)contentById:(NSInteger)id user:(NSString * _Nonnull)user completion:(void (^ _Nonnull)(BOOL, Content * _Nullable, NSInteger))completion;
/// Get content by hardware for BLE.
- (void)contentByHardware:(Beacon * _Nonnull)beacon user:(NSString * _Nonnull)user completion:(void (^ _Nonnull)(BOOL, Content * _Nullable, Content * _Nullable))completion SWIFT_DEPRECATED_MSG("Use contentByHardwareBeacon: instead");
/// Get content by hardware for a BLE beacon.
- (void)contentByHardwareBeacon:(Beacon * _Nonnull)beacon user:(NSString * _Nonnull)user completion:(void (^ _Nonnull)(BOOL, Content * _Nullable, Content * _Nullable, NSInteger))completion;
/// Get content by hardware for a QR code.
- (void)contentByHardwareQR:(NSString * _Nonnull)qrId user:(NSString * _Nonnull)user completion:(void (^ _Nonnull)(BOOL, Content * _Nullable, NSInteger))completion;
/// Get content by hardware for a NFC tag.
- (void)contentByHardwareNFC:(NSString * _Nonnull)nfcId user:(NSString * _Nonnull)user completion:(void (^ _Nonnull)(BOOL, Content * _Nullable, NSInteger))completion;
/// Get content by hardware for a geofence.
- (void)contentByHardwareGeofence:(NSString * _Nonnull)geofenceId user:(NSString * _Nonnull)user completion:(void (^ _Nonnull)(BOOL, Content * _Nullable, Content * _Nullable, NSInteger))completion;
- (void)nearestPlacesWithLatitude:(double)latitude longitude:(double)longitude limit:(NSInteger)limit completion:(void (^ _Nonnull)(BOOL, NSArray<Place *> * _Nullable, NSInteger))completion;
- (void)notificationDisplayedWithContentId:(NSString * _Nonnull)contentId;
- (void)notificationClickedWithContentId:(NSString * _Nonnull)contentId;
@end


SWIFT_CLASS("_TtC7MeppSDK10MeppBeacon")
@interface MeppBeacon : NSObject
@property (nonatomic, copy) NSUUID * _Nullable proximityUUID;
@property (nonatomic, copy) NSString * _Nullable identifier;
@property (nonatomic, strong) NSNumber * _Nonnull rssi;
@property (nonatomic, strong) NSNumber * _Nonnull battery;
@property (nonatomic, strong) NSNumber * _Nullable major;
@property (nonatomic, strong) NSNumber * _Nullable minor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol MeppBeaconManagerDelegate;

SWIFT_CLASS("_TtC7MeppSDK17MeppBeaconManager")
@interface MeppBeaconManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDelegate:(id <MeppBeaconManagerDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)startMonitoring;
- (void)stopMonitoring;
- (void)resetMonitoring;
- (void)startDiscovery;
- (void)stopDiscovery;
@end

@class CBPeripheral;

@interface MeppBeaconManager (SWIFT_EXTENSION(MeppSDK)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
@end


SWIFT_PROTOCOL("_TtP7MeppSDK26MeppSessionManagerDelegate_")
@protocol MeppSessionManagerDelegate
- (void)didFindNewContent:(Content * _Nonnull)content beacon:(Beacon * _Nonnull)beacon;
- (void)didChangeSessionStatus:(NSString * _Nonnull)status critical:(BOOL)critical;
- (void)shouldTrackAnalyticsEvent:(AnalyticsEvent * _Nonnull)event;
@end


@interface MeppBeaconManager (SWIFT_EXTENSION(MeppSDK)) <MeppSessionManagerDelegate>
- (void)didFindNewContent:(Content * _Nonnull)content beacon:(Beacon * _Nonnull)beacon;
- (void)didChangeSessionStatus:(NSString * _Nonnull)status critical:(BOOL)critical;
- (void)shouldTrackAnalyticsEvent:(AnalyticsEvent * _Nonnull)event;
@end

@class CLRegion;
@class CLBeaconRegion;

@interface MeppBeaconManager (SWIFT_EXTENSION(MeppSDK)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons inRegion:(CLBeaconRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didEnterRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
@end


SWIFT_PROTOCOL("_TtP7MeppSDK25MeppBeaconManagerDelegate_")
@protocol MeppBeaconManagerDelegate
- (void)didFindNewContent:(Content * _Nonnull)content;
- (void)didChangeSessionStatus:(NSString * _Nonnull)status critical:(BOOL)critical;
- (void)didDiscoverBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons;
- (void)shouldTrackAnalyticsEvent:(AnalyticsEvent * _Nonnull)event;
@end

@protocol MeppDeviceStatusManagerDelegate;

SWIFT_CLASS("_TtC7MeppSDK23MeppDeviceStatusManager")
@interface MeppDeviceStatusManager : NSObject
@property (nonatomic, strong) id <MeppDeviceStatusManagerDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)startReachabilityNotifier;
- (void)stopReachabilityNotifier;
- (void)startLocationNotifier;
- (void)requestAlwaysLocationAuthorization;
- (void)startBluetoothNotifier;
@end


@interface MeppDeviceStatusManager (SWIFT_EXTENSION(MeppSDK)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
@end


@interface MeppDeviceStatusManager (SWIFT_EXTENSION(MeppSDK)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
@end

enum ReachableStatus : NSInteger;

SWIFT_PROTOCOL("_TtP7MeppSDK31MeppDeviceStatusManagerDelegate_")
@protocol MeppDeviceStatusManagerDelegate
- (void)didChangeReachability:(enum ReachableStatus)reachabilityStatus;
- (void)didChangeLocationAuthorization:(enum LocationStatus)status;
- (void)didChangeBluetoothStatus:(enum BluetoothStatus)status;
@end

@protocol MeppGeofenceManagerDelegate;

SWIFT_CLASS("_TtC7MeppSDK19MeppGeofenceManager")
@interface MeppGeofenceManager : NSObject
- (nonnull instancetype)initWithDelegate:(id <MeppGeofenceManagerDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)startMonitoring;
- (void)stopMonitoring;
- (void)resetMonitoring;
- (void)reloadGeofences;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class CLLocation;

@interface MeppGeofenceManager (SWIFT_EXTENSION(MeppSDK)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager monitoringDidFailForRegion:(CLRegion * _Nullable)region withError:(NSError * _Nonnull)error;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didStartMonitoringForRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end


SWIFT_PROTOCOL("_TtP7MeppSDK27MeppGeofenceManagerDelegate_")
@protocol MeppGeofenceManagerDelegate
- (void)didFindGeofenceContent:(Content * _Nonnull)content;
- (void)didChangeStatus:(NSString * _Nonnull)status critical:(BOOL)critical;
- (void)geofencesDidChangeWithLocations:(NSArray<GeoLocation *> * _Nonnull)locations;
@end

@protocol MeppManagerDelegate;

SWIFT_CLASS("_TtC7MeppSDK11MeppManager")
@interface MeppManager : NSObject
@property (nonatomic, strong) id <MeppManagerDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDelegate:(id <MeppManagerDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)startMonitoring;
- (void)stopMonitoring;
- (void)resetMonitoring;
@end


@interface MeppManager (SWIFT_EXTENSION(MeppSDK)) <MeppGeofenceManagerDelegate>
- (void)didFindGeofenceContent:(Content * _Nonnull)content;
- (void)didChangeStatus:(NSString * _Nonnull)status critical:(BOOL)critical;
- (void)geofencesDidChangeWithLocations:(NSArray<GeoLocation *> * _Nonnull)locations;
@end


@interface MeppManager (SWIFT_EXTENSION(MeppSDK)) <MeppBeaconManagerDelegate>
- (void)didFindNewContent:(Content * _Nonnull)content;
- (void)didChangeSessionStatus:(NSString * _Nonnull)status critical:(BOOL)critical;
- (void)didDiscoverBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons;
- (void)shouldTrackAnalyticsEvent:(AnalyticsEvent * _Nonnull)event;
@end


SWIFT_PROTOCOL("_TtP7MeppSDK19MeppManagerDelegate_")
@protocol MeppManagerDelegate
- (void)didFindContent:(Content * _Nonnull)content;
- (void)didChangeStatus:(NSString * _Nonnull)status critical:(BOOL)critical;
- (void)geofencesDidChangeWithLocations:(NSArray<GeoLocation *> * _Nonnull)locations;
- (void)didDiscoverBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons;
- (void)shouldTrackAnalyticsEvent:(AnalyticsEvent * _Nonnull)event;
@end


SWIFT_CLASS("_TtC7MeppSDK7MeppSDK")
@interface MeppSDK : NSObject
+ (void)setAppToken:(NSString * _Nonnull)appToken forHost:(NSString * _Nonnull)apiHost completion:(void (^ _Nullable)(BOOL))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC7MeppSDK8MetaInfo")
@interface MetaInfo : NSObject
@property (nonatomic, copy) NSString * _Nullable imageURI;
@property (nonatomic, copy) NSString * _Nullable linkURI;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MeppSDK5Place")
@interface Place : NSObject
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, strong) Content * _Nullable content;
@property (nonatomic, strong) CLLocation * _Nullable location;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, ReachableStatus) {
  ReachableStatusReachable = 0,
  ReachableStatusUnReachable = 1,
  ReachableStatusUnknown = 2,
};


SWIFT_CLASS("_TtC7MeppSDK7Session")
@interface Session : NSObject
@property (nonatomic, copy) NSString * _Nullable appVersion;
@property (nonatomic, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, copy) NSString * _Nullable operatingSystem;
@property (nonatomic, copy) NSDate * _Nullable startTime;
@property (nonatomic, copy) NSDate * _Nullable endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MeppSDK14StatusResponse")
@interface StatusResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable version;
@property (nonatomic, copy) NSString * _Nullable apiVersion;
@property (nonatomic, copy) NSString * _Nullable gitRevision;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MeppSDK10TextRecord")
@interface TextRecord : NSObject
/// The name of the text record.
@property (nonatomic, copy) NSString * _Nullable name;
/// The text of the text record.
@property (nonatomic, copy) NSString * _Nullable text;
/// The language code of the text record.
@property (nonatomic, strong) LanguageCode * _Nullable languageCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
