// Generated by Apple Swift version 2.3 (swiftlang-800.10.12 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import CoreBluetooth;
@import ObjectiveC;
@import KontaktSDK;
@import CoreLocation;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface CBCentralManager (SWIFT_EXTENSION(MeppSDK))
@end


SWIFT_CLASS("_TtC7MeppSDK7Content")
@interface Content : NSObject

/// The type of the content.
@property (nonatomic, copy) NSString * _Nullable contentType;

/// This indicates the date from which a content is active.
@property (nonatomic, copy) NSString * _Nullable activeDateStart;
@property (nonatomic, copy) NSString * _Nullable activeDateStop;
@property (nonatomic, copy) NSString * _Nullable activeTimeStart;
@property (nonatomic, copy) NSString * _Nullable activeTimeStop;

/// This extra infos as a dictionary (e.g. the legal text).
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull extraInfo;
@end

@class NSNumber;
@class KTKNearbyDevice;

SWIFT_CLASS("_TtC7MeppSDK16DiscoveredBeacon")
@interface DiscoveredBeacon : NSObject
@property (nonatomic, copy) NSString * _Nonnull identifier;
@property (nonatomic) NSInteger transmissionPower;
@property (nonatomic, copy) NSString * _Nonnull firmwareVersion;
@property (nonatomic) NSUInteger batteryLevel;
@property (nonatomic, strong) NSNumber * _Nonnull rssi;
- (nonnull instancetype)initFromKontaktBeacon:(KTKNearbyDevice * _Nonnull)beacon OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MeppSDK13MeppAPIClient")
@interface MeppAPIClient : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAppToken:(NSString * _Nonnull)appToken apiHost:(NSString * _Nonnull)apiHost OBJC_DESIGNATED_INITIALIZER;

/// Get content by id.
- (void)contentById:(NSInteger)id user:(NSString * _Nonnull)user completion:(void (^ _Nonnull)(BOOL succesful, Content * _Nullable content))completion;
@end

@protocol MeppBeaconManagerDelegate;
@class KTKBeaconRegion;

SWIFT_CLASS("_TtC7MeppSDK17MeppBeaconManager")
@interface MeppBeaconManager : NSObject
@property (nonatomic, strong) id <MeppBeaconManagerDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)startMonitoring;
- (void)stopMonitoringForRegion:(KTKBeaconRegion * _Nullable)region;
@end


@interface MeppBeaconManager (SWIFT_EXTENSION(MeppSDK))
@end

@class KTKDevicesManager;
@class NSError;

@interface MeppBeaconManager (SWIFT_EXTENSION(MeppSDK)) <KTKDevicesManagerDelegate>
- (void)devicesManager:(KTKDevicesManager * _Nonnull)manager didDiscoverDevices:(NSArray<KTKNearbyDevice *> * _Nullable)devices;
- (void)devicesManagerDidFailToStartDiscovery:(KTKDevicesManager * _Nonnull)manager withError:(NSError * _Nullable)error;
@end

@class KTKBeaconManager;
@class CLBeacon;

@interface MeppBeaconManager (SWIFT_EXTENSION(MeppSDK)) <KTKBeaconManagerDelegate>
- (void)beaconManager:(KTKBeaconManager * _Nonnull)manager didChangeLocationAuthorizationStatus:(CLAuthorizationStatus)status;
- (void)beaconManager:(KTKBeaconManager * _Nonnull)manager didDetermineState:(CLRegionState)state forRegion:(KTKBeaconRegion * _Nonnull)region;
- (void)beaconManager:(KTKBeaconManager * _Nonnull)manager didEnterRegion:(KTKBeaconRegion * _Nonnull)region;
- (void)beaconManager:(KTKBeaconManager * _Nonnull)manager didExitRegion:(KTKBeaconRegion * _Nonnull)region;
- (void)beaconManager:(KTKBeaconManager * _Nonnull)manager didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons inRegion:(KTKBeaconRegion * _Nonnull)region;
@end


SWIFT_PROTOCOL("_TtP7MeppSDK25MeppBeaconManagerDelegate_")
@protocol MeppBeaconManagerDelegate
- (void)didFindNewContent:(Content * _Nonnull)content;
- (void)didChangeSessionStatus:(NSString * _Nonnull)status critical:(BOOL)critical;
- (void)didDiscoverBeacons:(NSArray<DiscoveredBeacon *> * _Nonnull)beacons;
@end


SWIFT_CLASS("_TtC7MeppSDK23MeppDeviceStatusManager")
@interface MeppDeviceStatusManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)startReachabilityNotifier;
- (void)stopReachabilityNotifier;
- (void)startLocationNotifier;
- (void)requestAlwaysLocationAuthorization;
- (void)startBluetoothNotifier;
@end

@class CLLocationManager;

@interface MeppDeviceStatusManager (SWIFT_EXTENSION(MeppSDK)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
@end


@interface MeppDeviceStatusManager (SWIFT_EXTENSION(MeppSDK)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
@end


SWIFT_CLASS("_TtC7MeppSDK7MeppSDK")
@interface MeppSDK : NSObject
+ (void)setAppToken:(NSString * _Nonnull)appToken forHost:(NSString * _Nonnull)apiHost completion:(void (^ _Nullable)(BOOL successful))completion;
+ (void)setupGoogleAnalyticsWithID:(NSString * _Nonnull)id;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSDate (SWIFT_EXTENSION(MeppSDK))
@end

#pragma clang diagnostic pop
